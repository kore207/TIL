@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
}
@{
    ViewBag.Title = "MAP2";
    Layout = null;//asp.net core의 레이아웃에 벗어나기 위해 추가
}

<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
    <title>Dron map 2</title>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" />
    <script src="https://code.jquery.com/jquery-latest.min.js"></script>    
    <script type="text/javascript" src="https://map.vworld.kr/js/vworldMapInit.js.do?version=2.0&apiKey=B4DB6C25-ADD1-3B61-AED5-934A7F0E07BF&domain=localhost:8080"></script>
</head>

<body>
    <style type="text/css">
        .buttons {
            position: relative;
            top: 30px;
        }

        .checkbox-xl {
            position: relative;
            top: 120px;
            left: 90px;
            transform: scale(1.5);
            -webkit-transform: scale(1.5);
        }
    </style>
    <!--네비게이션 영역-->
    <div id="navi" style="height:100%; float:left; width:13% ">
        <div class="buttons">
            <!-- 부트스트랩 사용-->
            <button id="FL" type="button" class="btn btn-default btn-lg btn-block">제한구역 보기</button>
            <button id="position" type="button" class="btn btn-default btn-lg btn-block">  내 위치 </button>
            <button id="addAntenna" type="button" class="btn btn-default btn-lg btn-block"> 수신기 추가</button>
            <button id="addDron" type="button" class="btn btn-default btn-lg btn-block"> 드론 추가 </button>
            <button id="simul" type="button" class="btn btn-default btn-lg btn-block"> 실시간 전시</button>
            <button id="temp" type="button" class="btn btn-default btn-lg btn-block"> 임시 버튼 </button>
        </div>
        <div class="custom-control custom-checkbox checkbox-xl" ">
            <input type="checkbox" class="custom-control-input" id="lt_c_aisprhc">
            <label class="custom-control-label" for="customCheck1" style="color:red">비행금지구역</label><br />
            <input type="checkbox" class="custom-control-input" id="lt_c_aisctrc">
            <label class="custom-control-label" for="customCheck1" style="color:orange"> 관제권</label><br />
            <input type="checkbox" class="custom-control-input" id="lt_c_aisresc">
            <label class="custom-control-label" for="customCheck1" style="color:orangered"> 비행제한구역</label><br />
            <input type="checkbox" class="custom-control-input" id="lt_c_aisdngc">
            <label class="custom-control-label" for="customCheck1" style="color:purple"> 위험구역    25kg↑</label><br />
            <input type="checkbox" class="custom-control-input" id="lt_c_aismoac">
            <label class="custom-control-label" for="customCheck1" style="color:olive"> 군작전구역    25kg↑</label><br />
            <input type="checkbox" class="custom-control-input" id="lt_c_aiscatc">
            <label class="custom-control-label" for="customCheck1" style="color:blue"> 훈련구역    25kg↑</label><br />
            <input type="checkbox" class="custom-control-input" id="lt_c_aistmac">
            <label class="custom-control-label" for="customCheck1" style="color:brown"> 접근관제구역 25kg↑</label>
        </div>
    </div>

    <!--지도가 들어갈 영역-->
    <div id="vmap" style="height:100%; float:right; width:87%"></div>        

    <script type="text/javascript">

        //지도 생성                
        vw.ol3.CameraPosition.center = [14176994.56431106, 4354866.236842043];
        vw.ol3.CameraPosition.zoom = 19;

        vw.ol3.MapOptions = {
            basemapType: vw.ol3.BasemapType.GRAPHIC
            , controlDensity: vw.ol3.DensityType.FULL
            , interactionDensity: vw.ol3.DensityType.BASIC
            , controlsAutoArrange: true
            , homePosition: vw.ol3.CameraPosition
            , initPosition: vw.ol3.CameraPosition
        };
        vmap = new vw.ol3.Map("vmap", vw.ol3.MapOptions);
                
        //마커 추가     
        var dronNum = 0;
        function plusTargetNum(target) {
            if (target == 5) //갯수 제한
                return;
            return ++target;
        }
        function minusTargetNum(target) {
            if (target == 0)
                return;
            return --target;
        }

        var dronInfoArray = [];
        dronInfoArray[1] = {
            name: "Dron A",
            honer: "홍길동",
            phone: "010 - 7345 - 2345",
            insurance: "YES"
        };

        dronInfoArray[2] = {
            name: "Dron B",
            honer: "이성계",
            phone: "010 - 2121 - 3131",
            insurance: "YES"
        };

        dronInfoArray[3] = {
            name: "Dron C",
            honer: "강감찬",
            phone: "010 - 2511 - 6101",
            insurance: "YES"
        };

        dronInfoArray[4] = {
            name: "Dron D",
            honer: "이순신",
            phone: "010 - 6232 - 9543",
            insurance: "YES"
        };

        dronInfoArray[5] = {
            name: "Dron E",
            honer: "문익점",
            phone: "010 - 8643 - 1425",
            insurance: "YES"
        };
        var markerLayer; //마커를 담을 레이어 
        var line_feature;
        var vectorSource;
        var vectorLayer;

        $("#addDron").on("click", function (e) {                                    

            if (dronNum == 5) {
                alert("허용 드론 수 초과");
                return;
            }
            dronNum = plusTargetNum(dronNum);

            var addPoint = [];
            addPoint.push(ol.proj.transform([vmap.getView().getCenter()[0], vmap.getView().getCenter()[1]], "EPSG:900913", "EPSG:4326"));
            
            if (markerLayer == null) {
                markerLayer = new vw.ol3.layer.Marker(vmap);
            }
            
            markerLayer.set("name", "마커레이어");
            
            vw.ol3.markerOption = {
                x: addPoint[0][0] ,
                y: addPoint[0][1] ,
                epsg: "EPSG:4326",
                title: '가상 드론',
                contents: dronInfoArray[dronNum].name + '</br>'
                    + '소유주:' + dronInfoArray[dronNum].honer + '</br>'
                    + '핸드폰 번호:' + dronInfoArray[dronNum].phone + '</br>'
                    + '보험:' + dronInfoArray[dronNum].insurance + '</br>',
                iconUrl: '../images/dronImg2.png',
            }; //마커 옵션 설정
            
            markerLayer.addMarker(vw.ol3.markerOption);// 마커를 레이어에 등록
            //markerLayer.getSource().getFeatures().set("식별자", "ID_" + 1);
            
            //vmap.removeLayer(vmap.getLayerByName("마커레이어")) //vmap.getLayerByName(레이어명)            
            if (vmap.getLayerByName("마커레이어") == null)//하나의 레이어에 추가한다.    
            {
                markerLayer.setZIndex(10); // 이동 경로보다 마커가 위에오도록함 
                vmap.addLayer(markerLayer) //마커를 vmap에 등록                        
            }            

            //route 레이어 추가 
            line_feature = new ol.Feature({
                geometry: new ol.geom.LineString([]),
                id: dronNum
            });

            line_feature.setStyle(style);
            features.push(line_feature);
            vectorSource = new ol.source.Vector({
                features: features,
                id: dronNum
            });

            vectorLayer = new ol.layer.Vector({
                source: vectorSource,
                id: dronNum
            });

            vmap.addLayer(vectorLayer);

            moveM(dronNum); //가상 전시를 위한 timer 
            
        })

        //사각형 이동 
        var distance = 0, dir = 0, dx = 0, dy = 0;
        const moveRect = function (dis) {
            //상하좌우 배열로 변경하기 
            if (dir == 1) {//우측                     
                dx = 0.5; dy = 0;
                if (distance == dis) {
                    distance = 0;
                    dir++;
                }
            }
            else if (dir == 2) {//상측                    
                dx = 0; dy = 0.5;
                if (distance == dis) {
                    distance = 0;
                    dir++;
                }
            }
            else if (dir == 3) {//좌측                    
                dx = -0.5; dy = 0;
                if (distance == dis) {
                    distance = 0;
                    dir++;
                }
            }
            else {//하측                    
                dx = 0; dy = -0.5;
                if (distance == dis) {
                    distance = 0;
                    dir = 1;
                }
            }
            distance++;
        }

        var style = new ol.style.Style({
            stroke: new ol.style.Stroke({
                color: [0, 255, 0, .7], //투명도
                width: 1 //두께
            })
        }); // 스타일 설정
        
        var features = new Array();
        var coordinates = []; //좌표 설정 라인 좌표를 저장
        //var routeMap1 = null;
        //var routeMap2 = null;

        //function jsCreatRoute(mapName) {
        //    routeMap1 = new vw.ol3.control.RouteMap(vmap, mapName, null, null);
        //    routeMap1.setFunction(moveM);
        //}

        var moveM = function (dronN) {            
            var t = setInterval(function () {
                if (vmap.getLayerByName("마커레이어") == null) {
                    alert("드론이 없습니다.");
                    return;
                }
                var dronFeatures = vmap.getLayerByName("마커레이어").getSource().getFeatures(); // 마커레이어를 가져온다.

                //var imgSrc = "../images/dronImg2.png";

                //var iconStyle = new ol.style.Style({
                //    image: new ol.style.Icon(({
                //        anchor: [0.9, 46], //마커 이미지의 절대위치를 변경
                //        anchorXUnits: 'fraction',
                //        anchorYUnits: 'pixels',
                //        src: imgSrc
                //    }))
                //});
                var oldcoor = dronFeatures[0].getGeometry().getCoordinates();
                var newcoor;
                moveRect(300);
                if (dronN == 1)
                    newcoor = [oldcoor[0] + dx, oldcoor[1] + dy];
                else if (dronN == 2) {
                    newcoor = [oldcoor[0] + dx, oldcoor[1] - dy];
                    if (dx > 0) {
                        var imgSrc = '../images/dronImg2warn.png';

                        var iconStyle = new ol.style.Style({
					        image: new ol.style.Icon( ({
						        anchor: [0.5, 46], //마커 이미지의 절대위치를 변경
						        anchorXUnits: 'fraction',
						        anchorYUnits: 'pixels',
						        src: imgSrc
					        }))
				        });
                        dronFeatures[0].setStyle(iconStyle);
                    }
                }
                else if (dronN == 3)
                    newcoor = [oldcoor[0] - dx, oldcoor[1] - dy];
                else if (dronN == 4)
                    newcoor = [oldcoor[0] - dx, oldcoor[1] + dy];
                else
                    newcoor = [oldcoor[0] + dx, oldcoor[1] - dy];

                dronFeatures[0].getGeometry().setCoordinates(newcoor);

                //route 표시                  
                line_feature.getGeometry().appendCoordinate(newcoor);
                    
            }, 100);
        }

        
        
                              
        var layList = ["lt_c_aisprhc", "lt_c_aisctrc", "lt_c_aisresc", "lt_c_aisdngc", "lt_c_aismoac", "lt_c_aiscatc", "lt_c_aistmac"];
          
        $('#'+layList[0]).change(function () {            
            if ($('#' +layList[0]).is(":checked")) {                
                var wmslayer = vmap.addNamedLayer("비행금지구역", layList[0]);
                vmap.addLayer(wmslayer);
            } else {
                vmap.getLayerByName("비행금지구역");
                vmap.removeLayer(vmap.getLayerByName("비행금지구역"));
            }
        });

        $('#' + layList[1]).change(function () {            
            if ($('#' + layList[1]).is(":checked")) {                
                var wmslayer = vmap.addNamedLayer("관제권", layList[1]);
                vmap.addLayer(wmslayer);
            } else {
                vmap.getLayerByName("관제권");
                vmap.removeLayer(vmap.getLayerByName("관제권"));
            }
        });

        $('#' + layList[2]).change(function () {            
            if ($('#' + layList[2]).is(":checked")) {                
                var wmslayer = vmap.addNamedLayer("비행제한구역", layList[2]);
                vmap.addLayer(wmslayer);
            } else {
                vmap.getLayerByName("비행제한구역");
                vmap.removeLayer(vmap.getLayerByName("비행제한구역"));
            }
        });

        $('#' + layList[3]).change(function () {
            
            if ($('#' + layList[3]).is(":checked")) {                
                var wmslayer = vmap.addNamedLayer("위험구역", layList[3]);
                vmap.addLayer(wmslayer);
            } else {
                vmap.getLayerByName("위험구역");
                vmap.removeLayer(vmap.getLayerByName("위험구역"));
            }
        });

        $('#' + layList[4]).change(function () {            
            if ($('#' + layList[4]).is(":checked")) {                
                var wmslayer = vmap.addNamedLayer("군작전구역", layList[4]);
                vmap.addLayer(wmslayer);
            } else {
                vmap.getLayerByName("군작전구역");
                vmap.removeLayer(vmap.getLayerByName("군작전구역"));
            }
        });

        $('#' + layList[5]).change(function () {            
            if ($('#' + layList[5]).is(":checked")) {                
                var wmslayer = vmap.addNamedLayer("훈련구역", layList[5]);
                vmap.addLayer(wmslayer);
            } else {
                vmap.getLayerByName("훈련구역");
                vmap.removeLayer(vmap.getLayerByName("훈련구역"));
            }
        });

        $('#' + layList[6]).change(function () {
            if ($('#' + layList[6]).is(":checked")) {
                var wmslayer = vmap.addNamedLayer("접근관제구역", layList[6]);
                vmap.addLayer(wmslayer);
            } else {
                vmap.getLayerByName("접근관제구역");
                vmap.removeLayer(vmap.getLayerByName("접근관제구역"));
            }
        });
                        
        $("#position").on("click", function (e) {
            e.preventDefault();                                    
            move(14176994.56431106, 4354866.236842043, 18);
        });             

        //지정 위치로 지도 이동 부드럽게 
        function move(x, y, z) {
            var _center = [x, y];

            var z = z;
            var pan = ol.animation.pan({
                duration: 1000,
                source: (vmap.getView().getCenter())
            });
            vmap.beforeRender(pan);
            //vmap.getView().setCenter(ol.proj.transform(_center, 'EPSG:4326', "EPSG:900913"));
            vmap.getView().setCenter(_center);
            setTimeout("fnMoveZoom()", 2000);            
        }
        function fnMoveZoom() {
            zoom = vmap.getView().getZoom();
            if (16 > zoom) {
                vmap.getView().setZoom(18);
            }
        };

        $("#temp").on("click", function (e) {
            e.preventDefault();

            var layers = vmap.getLayers();
            var len = layers.getLength();            
            console.log(layers);
            console.log(len);

            vmap.removeLayer();
            
        });

          
    </script>

</body>
</html>