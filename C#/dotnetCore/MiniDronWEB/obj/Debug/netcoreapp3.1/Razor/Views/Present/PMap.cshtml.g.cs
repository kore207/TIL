#pragma checksum "C:\Users\CEO\Desktop\소형드론\MiniDronWEB\MiniDronWEB\Views\Present\PMap.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "169c4ba630011096d29d648468429070266d076d"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Present_PMap), @"mvc.1.0.view", @"/Views/Present/PMap.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\CEO\Desktop\소형드론\MiniDronWEB\MiniDronWEB\Views\_ViewImports.cshtml"
using MiniDronWEB;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\CEO\Desktop\소형드론\MiniDronWEB\MiniDronWEB\Views\_ViewImports.cshtml"
using MiniDronWEB.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\CEO\Desktop\소형드론\MiniDronWEB\MiniDronWEB\Views\Present\PMap.cshtml"
using MiniDronWEB.Controllers;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"169c4ba630011096d29d648468429070266d076d", @"/Views/Present/PMap.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"838d7710b9f5e5c62240628bfccb8ff4cbf7c199", @"/Views/_ViewImports.cshtml")]
    public class Views_Present_PMap : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("type", new global::Microsoft.AspNetCore.Html.HtmlString("text/javascript"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/DronObject.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("id", new global::Microsoft.AspNetCore.Html.HtmlString("searchForm"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_3 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("action", new global::Microsoft.AspNetCore.Html.HtmlString("#"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_4 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("class", new global::Microsoft.AspNetCore.Html.HtmlString("form_data"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_5 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("onsubmit", new global::Microsoft.AspNetCore.Html.HtmlString("return false;search();"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_6 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("id", new global::Microsoft.AspNetCore.Html.HtmlString("dataForm"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_7 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("id", new global::Microsoft.AspNetCore.Html.HtmlString("aisDataForm"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_8 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/vmapFunction.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("\r\n");
            WriteLiteral("\r\n<style>\r\n\r\n</style>\r\n<!DOCTYPE html>     \r\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("head", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "169c4ba630011096d29d648468429070266d076d7268", async() => {
                WriteLiteral("\r\n    <title>소형드론</title>\r\n");
                WriteLiteral("    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "169c4ba630011096d29d648468429070266d076d7592", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("    \r\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"../css/site.css\" />\r\n");
                WriteLiteral(@"

        <style>
            table, th, td {
                border: 1px solid white;
                border-collapse: collapse;
            }

            th, td {
                padding: 2px;
                text-align: left;
            }
        </style>

    ");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "169c4ba630011096d29d648468429070266d076d9880", async() => {
                WriteLiteral("\r\n\r\n    <div id=\"mySidebar\" class=\"sidebar\" style=\"height:100%; float:left; width:13%\">\r\n");
                WriteLiteral(@"        <div class=""accordion"" id=""Sidebar"">
            <div class=""card"">
                <div class=""card-header"" id=""headingOne"">
                    <h2 class=""mb-0"">
                        <button class=""btn btn-link"" type=""button"" data-toggle=""collapse"" data-target=""#collapseOne"" aria-expanded=""true"" aria-controls=""collapseOne"">
                            드론 보기 설정
                        </button>
                    </h2>
                </div>

                <div id=""collapseOne"" class=""collapse show"" aria-labelledby=""headingOne"" data-parent=""#Sidebar"">
                    <div class=""card-body"">
                        <input type=""checkbox"" class=""form-check-input"" id=""hide-all-dron"" style=""margin-left:10px;"">
                        <label class=""form-check-label"" for=""lt_c_aisprhc"" style=""color:black; margin-left:30px; "">드론 전체 감추기</label><br/>
                        <input type=""checkbox"" class=""form-check-input"" id=""temp"" style=""margin-left:10px;"">
                        <la");
                WriteLiteral(@"bel class=""form-check-label"" for=""lt_c_aisprhc"" style=""color:black; margin-left:30px; "">미허가</label><br/>
                        <input type=""checkbox"" class=""form-check-input"" id=""temp"" style=""margin-left:10px;"">
                        <label class=""form-check-label"" for=""lt_c_aisprhc"" style=""color:black; margin-left:30px; "">미식별</label><br/>
                        <input type=""checkbox"" class=""form-check-input"" id=""temp"" style=""margin-left:10px;"">
                        <label class=""form-check-label"" for=""lt_c_aisprhc"" style=""color:black; margin-left:30px; "">식별ID유효성 이상</label><br/>
                        <input type=""checkbox"" class=""form-check-input"" id=""showFlyViolation"" style=""margin-left:10px;"">
                        <label class=""form-check-label"" for=""showFlyViolation"" style=""color:black; margin-left:30px; "">비행금지 위반 드론만 보기</label><br/>
                    </div>
                </div>
            </div>
            <div class=""card"">
                <div class=""card-header"" id=""headin");
                WriteLiteral(@"gTwo"">
                    <h2 class=""mb-0"">
                        <button class=""btn btn-link collapsed"" type=""button"" data-toggle=""collapse"" data-target=""#collapseTwo"" aria-expanded=""false"" aria-controls=""collapseTwo"">
                            식별기 보기 설정
                        </button>
                    </h2>
                </div>
                <div id=""collapseTwo"" class=""collapse"" aria-labelledby=""headingTwo"" data-parent=""#Sidebar"">
                    <div class=""card-body"">
                        <input type=""checkbox"" class=""form-check-input"" id=""hide-all-antenna"" style=""margin-left:10px;"">
                        <label class=""form-check-label"" for=""lt_c_aisprhc"" style=""color:black; margin-left:30px; "">식별기 전체 감추기</label><br />
                        <input type=""checkbox"" class=""form-check-input"" id=""temp"" style=""margin-left:10px;"">
                        <label class=""form-check-label"" for=""lt_c_aisprhc"" style=""color:black; margin-left:30px; "">상태 이상</label><br />
          ");
                WriteLiteral(@"          </div>
                </div>
            </div>
            <div class=""card"">
                <div class=""card-header"" id=""headingThree"">
                    <h2 class=""mb-0"">
                        <button class=""btn btn-link collapsed"" type=""button"" data-toggle=""collapse"" data-target=""#collapseThree"" aria-expanded=""false"" aria-controls=""collapseThree"">
                            비행금지구역 보기 설정
                        </button>
                    </h2>
                </div>
                <div id=""collapseThree"" class=""collapse"" aria-labelledby=""headingThree"" data-parent=""#Sidebar"">
                    <div class=""card-body"">                        
                        <input type=""checkbox"" class=""form-check-input"" id=""lt_c_aisctrc"" style=""margin-left:10px;"">
                        <label class=""form-check-label"" for=""lt_c_aisctrc"" style=""color:forestgreen; margin-left:30px;""> 관제권</label><br />
                        <input type=""checkbox"" class=""form-check-input"" id=""lt_");
                WriteLiteral(@"c_aisatzc"" style=""margin-left:10px;"">
                        <label class=""form-check-label"" for=""lt_c_aisatzc"" style=""color:forestgreen; margin-left:30px;""> 비행장 교통구역</label><br />
                        <input type=""checkbox"" class=""form-check-input"" id=""lt_c_aisfirc"" style=""margin-left:10px;"">
                        <label class=""form-check-label"" for=""lt_c_aisfirc"" style=""color:orange; margin-left:30px;"">정보 구역</label><br />
                        <input type=""checkbox"" class=""form-check-input"" id=""lt_c_aisprhc"" style=""margin-left:10px;"">
                        <label class=""form-check-label"" for=""lt_c_aisprhc"" style=""color:red; margin-left:30px;"">비행금지구역</label><br />
                        <input type=""checkbox"" class=""form-check-input"" id=""lt_c_aisresc"" style=""margin-left:10px;"">
                        <label class=""form-check-label"" for=""lt_c_aisresc"" style=""color:red; margin-left:30px;""> 비행제한구역</label><br />
                        <input type=""checkbox"" class=""form-check-input"" id=""lt_c_");
                WriteLiteral(@"aisuac"" style=""margin-left:10px;"">
                        <label class=""form-check-label"" for=""lt_c_aisuac"" style=""color:red; margin-left:30px;""> 초경량 비행장치 비행제한 구역</label><br />
                        <input type=""checkbox"" class=""form-check-input"" id=""lt_c_aiscatc"" style=""margin-left:10px;"">
                        <label class=""form-check-label"" for=""lt_c_aiscatc"" style=""color:purple; margin-left:30px;""> 훈련구역    25kg↑</label><br />
                        <input type=""checkbox"" class=""form-check-input"" id=""lt_c_aismoac"" style=""margin-left:10px;"">
                        <label class=""form-check-label"" for=""lt_c_aismoac"" style=""color:purple; margin-left:30px;""> 군작전구역    25kg↑</label><br />
                        <input type=""checkbox"" class=""form-check-input"" id=""lt_c_aisdngc"" style=""margin-left:10px;"">
                        <label class=""form-check-label"" for=""lt_c_aisdngc"" style=""color:purple; margin-left:30px;""> 위험구역    25kg↑</label><br />
                        <input type=""checkbox"" class=""");
                WriteLiteral(@"form-check-input"" id=""lt_c_aisaltc"" style=""margin-left:10px;"">
                        <label class=""form-check-label"" for=""lt_c_aisaltc"" style=""color:purple; margin-left:30px;""> 경계구역</label><br />
                        <input type=""checkbox"" class=""form-check-input"" checked id=""customLayerCheck"" style=""margin-left:10px;"">
                        <label class=""form-check-label"" for=""customLayerCheck"" style=""color:blueviolet; margin-left:30px;""> 사용자 설정 구역</label>
                    </div>
                </div>
                <div class=""card"">
                    <div class=""card-header"" id=""headingFour"">
                        <h2 class=""mb-0"">
                            <button class=""btn btn-link collapsed"" type=""button"" data-toggle=""collapse"" data-target=""#collapseFour"" aria-expanded=""false"" aria-controls=""collapseFour"">
                                보기 설정
                            </button>
                        </h2>
                    </div>
                    <div id=""colla");
                WriteLiteral(@"pseFour"" class=""collapse"" aria-labelledby=""headingFour"" data-parent=""#Sidebar"">
                        <div class=""card-body"">
                            <input type=""checkbox"" class=""form-check-input"" id=""adsigg"" style=""margin-left:10px;"">
                            <label class=""form-check-label"" for=""adsigg"" style=""color:black; margin-left:30px;"">시군구 경계</label><br />
                            <input type=""checkbox"" class=""form-check-input"" id=""ademd"" style=""margin-left:10px;"">
                            <label class=""form-check-label"" for=""ademd"" style=""color:black; margin-left:30px;"">읍면동 경계</label><br />
                            <input type=""checkbox"" class=""form-check-input"" id=""temp"" style=""margin-left:10px;"">
                            <label class=""form-check-label"" for=""lt_c_aisprhc"" style=""color:black; margin-left:30px;"">드론 방향</label><br />
                            <input type=""checkbox"" class=""form-check-input"" id=""temp"" style=""margin-left:10px;"">
                            <");
                WriteLiteral(@"label class=""form-check-label"" for=""lt_c_aisprhc"" style=""color:black; margin-left:30px; "">드론 경로</label><br />
                            <input type=""checkbox"" class=""form-check-input"" checked id=""show-selected-dronController"" style=""margin-left:10px;"">
                            <label class=""form-check-label"" for=""lt_c_aisprhc"" style=""color:black; margin-left:30px; "">선택드론 조종기 보기</label><br />
                        </div>
                    </div>
                </div>
            </div>
        </div>
");
                WriteLiteral(@"        <div class=""buttons"">
            <button id=""position"" type=""button"" class=""btn btn-light btn-lg btn-block"">  내 위치 </button>
            <button id=""addAntenna"" type=""button"" class=""btn btn-light btn-lg btn-block""> 식별기 추가</button>
            <button id=""addDron"" type=""button"" class=""btn btn-light btn-lg btn-block""> 드론 추가 </button>
            <button id=""delDron"" type=""button"" class=""btn btn-light btn-lg btn-block""> 드론 제거 </button>            
            <button id=""createPolygon"" type=""button"" class=""btn btn-light btn-block btn-lg"">제한구역 설정</button>
            <button id=""tempbtn"" type=""button"" class=""btn btn-light btn-lg btn-block""> 임시 버튼 </button>

        </div>
    </div>

    <!--지도가 들어갈 영역-->
    <div id=""vmap"" style=""position:relative; height:830px; float:right; width:87%; transition: 0.5s; "">
");
                WriteLiteral("        <div style=\"height:38px;\">\r\n\r\n            ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "169c4ba630011096d29d648468429070266d076d20726", async() => {
                    WriteLiteral("\r\n                <button class=\"btn-primary\" onclick=\"toggleNav()\" style=\"width:37px; height:37px;\">☰</button>\r\n                <input type=\"hidden\" id=\"sido_key\" value=\"0fabd7c63b9f0bb661cae2\" />");
                    WriteLiteral("\r\n                <input type=\"hidden\" id=\"sigoon_key\" value=\"46d9fe0c389605a3a36db6\" /> ");
                    WriteLiteral("\r\n                <input type=\"hidden\" id=\"dong_key\" value=\"a866ed9828882807bc7e9b\" />");
                    WriteLiteral("\r\n                <input type=\"hidden\" name=\"apiKey\" value=\"D36C2F4C-D5D4-3214-8304-E094FCA2F56D\" />\r\n                <select id=\"sido_code\" style=\"height:37px;\">\r\n                    ");
                    __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "169c4ba630011096d29d648468429070266d076d21710", async() => {
                        WriteLiteral("광역시도");
                    }
                    );
                    __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
                    __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
                    await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                    if (!__tagHelperExecutionContext.Output.IsContentModified)
                    {
                        await __tagHelperExecutionContext.SetOutputContentAsync();
                    }
                    Write(__tagHelperExecutionContext.Output);
                    __tagHelperExecutionContext = __tagHelperScopeManager.End();
                    WriteLiteral("\r\n                </select>\r\n                <select id=\"sigoon_code\" style=\"height:37px;\">\r\n                    ");
                    __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "169c4ba630011096d29d648468429070266d076d22898", async() => {
                        WriteLiteral("시군구");
                    }
                    );
                    __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
                    __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
                    await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                    if (!__tagHelperExecutionContext.Output.IsContentModified)
                    {
                        await __tagHelperExecutionContext.SetOutputContentAsync();
                    }
                    Write(__tagHelperExecutionContext.Output);
                    __tagHelperExecutionContext = __tagHelperScopeManager.End();
                    WriteLiteral("\r\n                </select>\r\n                <select id=\"dong_code\" style=\"height:37px;\">\r\n                    ");
                    __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "169c4ba630011096d29d648468429070266d076d24083", async() => {
                        WriteLiteral("읍면동");
                    }
                    );
                    __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
                    __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
                    await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                    if (!__tagHelperExecutionContext.Output.IsContentModified)
                    {
                        await __tagHelperExecutionContext.SetOutputContentAsync();
                    }
                    Write(__tagHelperExecutionContext.Output);
                    __tagHelperExecutionContext = __tagHelperScopeManager.End();
                    WriteLiteral("\r\n                </select>\r\n            ");
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_4);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_5);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n        </div>\r\n\r\n\r\n    </div>\r\n\r\n");
                WriteLiteral("    <div id=\"popup\" class=\"ol-popup\">\r\n        <a href=\"#\" id=\"popup-positionChange\" class=\"ol-popup-positionChange\"></a>\r\n        <a href=\"#\" id=\"popup-closer\" class=\"ol-popup-closer\"></a>\r\n        <div id=\"popup-content\"></div>\r\n    </div>\r\n\r\n    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "169c4ba630011096d29d648468429070266d076d26927", async() => {
                    WriteLiteral(@"
        <input type=""hidden"" name=""key"" value=""D36C2F4C-D5D4-3214-8304-E094FCA2F56D"">
        <input type=""hidden"" name=""domain"" value=""http://localhost:8080"">
        <input type=""hidden"" name=""service"" value=""data"">
        <input type=""hidden"" name=""version"" value=""2.0"">
        <input type=""hidden"" name=""request"" value=""getfeature"">
        <input type=""hidden"" name=""format"" value=""json"">
        <input type=""hidden"" name=""size"" value=""10"">
        <input type=""hidden"" name=""page"" value=""1"">
        <!-- <input type=""hidden"" name=""data"" value=""LT_C_ADSIDO_INFO""> -->
        <input type=""hidden"" name=""data"" value=""LT_C_ADEMD_INFO"">
        <input type=""hidden"" name=""geometry"" value=""true"">
        <input type=""hidden"" name=""attribute"" value=""true"">
        <input type=""hidden"" name=""crs"" value=""EPSG:900913"">
    ");
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_6);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n\r\n    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "169c4ba630011096d29d648468429070266d076d29235", async() => {
                    WriteLiteral(" ");
                    WriteLiteral(@"
        <input type=""hidden"" name=""domain"" value=""https://127.0.0.1"">
        <input type=""hidden"" name=""service"" value=""WFS"">
        <input type=""hidden"" name=""version"" value=""1.1.0"">
        <input type=""hidden"" name=""request"" value=""GetFeature"">
        <input type=""hidden"" name=""key"" value=""D36C2F4C-D5D4-3214-8304-E094FCA2F56D"">
        <input type=""hidden"" name=""output"" value=""text/javascript"">
        <input type=""hidden"" name=""typename""");
                    BeginWriteAttribute("value", " value=\"", 13750, "\"", 13758, 0);
                    EndWriteAttribute();
                    WriteLiteral("> ");
                    WriteLiteral(" \r\n        <input type=\"hidden\" name=\"bbox\"");
                    BeginWriteAttribute("value", " value=\"", 13823, "\"", 13831, 0);
                    EndWriteAttribute();
                    WriteLiteral(">\r\n        <input type=\"hidden\" name=\"srsname\" value=\"EPSG:900913\"> ");
                    WriteLiteral("\r\n    ");
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_7);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral(@"


    <script type=""text/javascript"">
        let container = document.getElementById('popup');
        let content = document.getElementById('popup-content');
        let positionChanger = document.getElementById('popup-positionChange');
        let closer = document.getElementById('popup-closer');

        let popupOverlay = new ol.Overlay({
            element: container,
            autoPan: true,
            autoPanAnimation: {
                duration: 250
            }
        });

        closer.onclick = function () {
            $('#popup-open').attr('id', 'popup')
            popupOverlay.setPosition(undefined);
            popupOverlay.set('id', 'popup-none');
            closer.blur();
            return false;
        };

        positionChanger.onclick = function () {
            var container = document.getElementsByClassName(""ol-overlay-container"");
            var popupwindow = document.getElementById('popup-open')

            if (container[0].style.position ==");
                WriteLiteral(@" 'absolute') {
                container[0].style.position = 'static';
                popupwindow.style.left = '5px'
                popupwindow.style.bottom = '57px'
            } else {
                container[0].style.position = 'absolute';
                popupwindow.style.left = '-50px'
                popupwindow.style.bottom = '52px'
            }

        }
        //지도 생성
        vw.ol3.CameraPosition.center = [14176994.56431106, 4354866.236842043];//넷커스터마이즈
        vw.ol3.CameraPosition.zoom = 19;

        vw.ol3.MapOptions = {
            basemapType: vw.ol3.BasemapType.GRAPHIC
            , controlDensity: vw.ol3.DensityType.FULL
            , interactionDensity: vw.ol3.DensityType.BASIC
            , controlsAutoArrange: true
            , homePosition: vw.ol3.CameraPosition
            , initPosition: vw.ol3.CameraPosition
        };

        vmap = new vw.ol3.Map(""vmap"", vw.ol3.MapOptions);
        vmap.addOverlay(popupOverlay);

        //툴바-새로고침 버튼 삭제
        vm");
                WriteLiteral(@"ap.removeControl(vmap.getControls().getArray()[6]);
        //ui 자연스럽게하기위해 + 버튼 아이콘 재정의
        vmap.getControls().getArray()[6].element.src = ""../images/btn_zoomin.png"";
        //지도에 텍스트 추가 (일반 사용자일때만 보이게 한다.)
        let newDivHtml = ""<span><b>※지도의 모든 대상은 5분전의 위치입니다.</b></span>"";
        let div = parent.document.createElement(""div"");
        div.style = ""position: absolute; z - index: 100; top: 10px; right: 0px; bottom: 0px; width: 300px; height: 25px; color:brown; font-size:13px;""
        div.innerHTML = newDivHtml;
        parent.document.getElementsByClassName(""ol-overlaycontainer-stopevent"")[0].appendChild(div);
        //지도 모드 변환 버튼 추가
        let modeHtmlArray = [""<button onclick='mapModeChange(0)' class='modeChangeIcon' style='bottom:0px;'><img style='position:relative; margin: auto; left:-5px;' src='../images/normal_map.png'></button>"",
            ""<button onclick='mapModeChange(0)' class='modeChangeIcon' style='bottom:62px;'><img style='position:relative; margin: auto; left:-5px;' src");
                WriteLiteral(@"='../images/normal_map.png'></button>"",
            ""<button onclick='mapModeChange(1)' class='modeChangeIcon' style='bottom:124px;'><img style='position:relative; margin: auto; left:-5px;' src='../images/night_map.png'></button>"",
            ""<button onclick='mapModeChange(2)' class='modeChangeIcon' style='bottom:186px;'><img style='position:relative; margin: auto; left:-5px;' src='../images/satel_map.png'></button>"",
            ""<button onclick='mapModeChange(3)' class='modeChangeIcon' style='bottom:248px;'><img style='position:relative; margin: auto; left:-5px;' src='../images/hibrid_map.png'></button>""]

        let newDivHtml2 = modeHtmlArray[0] + modeHtmlArray[1] + modeHtmlArray[2] + modeHtmlArray[3] + modeHtmlArray[4];

        let div2 = parent.document.createElement(""div"");
        div2.style = ""position: absolute; z - index: 100; left: 10px; bottom: 65px; width:62px; height:62px; overflow:hidden;""
        div2.innerHTML = newDivHtml2;
        div2.setAttribute('id', 'test');
        div");
                WriteLiteral(@"2.setAttribute('onmouseover', 'sizeChangeEvent(this, 310)');
        div2.setAttribute('onmouseout', 'sizeChangeEvent(this, 62)');

        parent.document.getElementsByClassName(""ol-overlaycontainer-stopevent"")[0].appendChild(div2);

        let selected = null;



        vmap.on('singleclick', function (evt) {
            $('#popup-open').attr('id', 'popup') //외부영역 클릭시 팝업 꺼지도록
            popupOverlay.set('id', 'popup-none');
            popupOverlay.setPosition(undefined);
            closer.blur();

            if (controllerLayer != null) {//선택한 드론의 조종기만 보여주기 위해 클릭시 클리어한다.
                controllerLayer.getSource().clear();//조종기와 드론연결선이 클리어 된다.
            }

            if ((selected !== null) && (selected.values_.id)) { //외부영역 클릭시 feature 포커스 효과 제거

                if (selected.values_.id.indexOf('antenna') > -1) {
                    selected.setStyle(antennaStyle(selected, 'normal'));
                } else if (selected.values_.id.indexOf('dron') > -1) {
                    ");
                WriteLiteral(@"selected.setStyle(dronStyle(selected, 'normal'));
                }
                selected = null;
            }

            let feature = vmap.forEachFeatureAtPixel(evt.pixel,
                function (feature) {
                    let temp = feature.getGeometry();

                    selected = feature;

                    //클릭 feature 포커스 효과
                    if (selected.values_.id) { //거리 측정 기능 사용시 생기는 에러 방지
                        if (selected.values_.id.indexOf('antenna') > -1) {
                            feature.setStyle(antennaStyle(selected, 'selected'));
                        } else if (selected.values_.id.indexOf('dron') > -1) {
                            feature.setStyle(dronStyle(selected, 'selected'));
                        } else if (selected.values_.id.indexOf('사용자') > -1) {
                            console.log(""사용자 설정 레이어 선택"")
                        }

                        return feature;
                    }
                });


            ");
                WriteLiteral(@"//일단 아이콘과 팝업 분리..
            if (feature) { //클릭 지점이 feature 이면 ...
                
                $('#popup').attr('id', 'popup-open')
                let coordinates = feature.getGeometry().getCoordinates();

                if (feature.get('id').indexOf('antenna') > -1) { //식별기 클릭
                    let thisAntennaNum = feature.get('id').slice(7)//id에 적용된 숫자를 보고 몇번째 식별기/드론 인지 판단한다.
                    popupOverlay.set('id', 'popup-antenna' + thisAntennaNum);
                    popupOverlay.setPosition(coordinates);
                    content.innerHTML = feature.get('contents');
                } else if (feature.get('id').indexOf('dron') > -1) { //드론 클릭
                    let thisDronName = feature.get('id').slice(5); // 'dron42 ' 와 같이 4번째부터 숫자 정보를 가져온다.
                    popupOverlay.set('id', 'popup-dron' + thisDronName);
                    popupOverlay.setPosition(coordinates);
                    content.innerHTML = feature.get('contents');

                    //선택 드론 조종기 표시");
                WriteLiteral(@"
                    selectedDronController(thisDronName);
                }
            }
        });

        //맵 내부 스타일 수정
        $('.vw-span').css({ position: ""absolute"" })
        $('.vw-toolbar').css({ position: ""absolute"", display: ""block"", marginLeft: ""25px"", width: ""390px"", height: ""30px"" })

        document.getElementById(""mySidebar"").addEventListener(""transitionend"", function () { vmap.updateSize() });

        //식별기 추가
        $(""#addAntenna"").on(""click"", function (e) {

            let antennaFeature = new ol.Feature({
                geometry: new ol.geom.Point(vmap.getView().getCenter()),
                contents:
                    '<b><big>테스트 식별기-' + Dron.totalCnt + '</big></b>'
                    + '<hr>'
                    + '<table style=""width:100%"">'
                    + '<tr><th>운용타입</th><td> 고정형 </td></tr>'
                    + '<tr><th>동작상태</th><td> 정상 </td></tr>'
                    + '<tr><th>식별드론수</th><td> - 대 </td></tr></table>'
                    ");
                WriteLiteral(@"+ '<hr>'
                    + '<button type=""button"" class=""btn btn-primary"" id=""dronInfoPop"" onclick=""tempfunc()"";>식별기정보</button>' + '&nbsp&nbsp'
                    + '<button type=""button"" class=""btn btn-primary"" id=""dronMasPop"" >상태로그</button>',

            })

            antennaFeature.set(""id"", ""antenna"" + Dron.totalCnt);

            let iconStyle = new ol.style.Style({
                image: new ol.style.Icon(({
                    crossOrigin: 'anonymous',
                    anchor: [0.5, 46],
                    anchorXUnits: 'fraction',
                    anchorYUnits: 'pixels',
                    src: '../images/antennaImg.png'
                })),
                text: new ol.style.Text({ //아이콘 하단 텍스트 라벨
                    //textAlign: align = align,
                    //textBaseline: baseline,
                    font: '12px Calibri,sans-serif',
                    text: '테스트 식별기' + Dron.totalCnt,
                    fill: new ol.style.Fill({ color: '#000' }),
      ");
                WriteLiteral(@"              stroke: new ol.style.Stroke({ color: '#fff', width: 2 }),
                    offsetX: 0.5,
                    offsetY: 12,
                    //placement: placement,
                    //maxAngle: maxAngle,
                    //overflow: overflow,
                    //rotation: rotation
                })
            });
            antennaFeature.setStyle(iconStyle);

            let vectorSource = new ol.source.Vector({
                features: [antennaFeature] //배열 형식으로 추가해줘야 한다.
            });

            if (vmap.getLayerByName(""식별기레이어"") == null) { //처음 생성시(레이어가 없는경우 레이어 생성)
                antennaLayer = new ol.layer.Vector({
                    source: vectorSource
                });

                antennaLayer.set(""name"", ""식별기레이어"");
                antennaLayer.setZIndex(10);
                vmap.addLayer(antennaLayer);
            } else {
                antennaLayer.getSource().addFeature(antennaFeature); //레이어가 있으면 feature만 추가
            }


 ");
                WriteLiteral(@"       })

        ////드론 추가
        //$(""#addDron"").on(""click"", function (e) {

        //    if (Dron.totalCnt == dronNumLimit) {//임의로 5개로 제한
        //        alert(""허용 드론 수 초과"");
        //        return;
        //    }

        //    //식별 시작시간
        //    let time = new Date().toLocaleTimeString('ko-KR', { timeStyle: 'medium', hourCycle: 'h24' });

        //    //드론 객체 생성(식별기 정보 수집))
        //    dronObject.push(new Dron(Dron.totalCnt, ""Dron"" + Dron.totalCnt, ""익명"", ""010-xxxx-xxxx"", ""YES"", 0, time));

        //    //드론 객체 내부 타이머 ON
        //    dronObject[Dron.totalCnt].switchState('ON');

        //    //최종으로 드론수 증가
        //    Dron.totalCnt++;

        //})


        //선택 드론 삭제(혹은 비행 완료, 미식별 시간 초과 같은 신호가 왔을때 삭제.)
        $(""#delDron"").on(""click"", function (e) {
            e.preventDefault();

            if (Dron.totalCnt == 0) {
                alert(""드론이 없습니다."");
                return;
            }

            if (selected == null) {
                aler");
                WriteLiteral(@"t(""선택된 드론이 없습니다."");
                return;
            }

            let seletedDronNum = selected.get('id').slice(5);


            if (controllerLayer) {
                let ControllerFeatrues = controllerLayer.getSource().getFeatures();

                for (cnt in ControllerFeatrues) {
                    controllerLayer.getSource().removeFeature(ControllerFeatrues[cnt]); //조종기 관련 feature 제거
                }
            }

            Dron.reduceCnt(); //드론 전체 수 감소

            ////splice로 선택된 드론 idx 제거 해보기
            for (obj in dronObject) {
                if (dronObject[obj].dnum == seletedDronNum) {
                    dronObject[obj].switchState('OFF'); //드론 비행시간 종료
                    dronObject.splice(obj, 1)

                }
            }

        });

        let selectedDronController = function (selectDron) {
            $.ajax({
                type: 'GET',
                url: '/Present/AddControllerInfo/' + (selectDron.length % 3),
                succe");
                WriteLiteral(@"ss: function (result) {
                    let conCoord = [result[(selectDron.length % 3)].controllerlongitude, result[(selectDron.length % 3)].controllerlatitude];
                    
                    var controller = new ol.Feature({
                        geometry: new ol.geom.Point(new ol.proj.transform(conCoord, ""EPSG:4326"", ""EPSG:900913"")) //ajax 로 위치값 받아야함
                    });

                    let thisDron = dronObject.filter(obj => obj.dronID == selectDron).pop();
                    
                    //dronObject[selectDron].controllerCoorp = new ol.proj.transform(conCoord, ""EPSG:4326"", ""EPSG:900913"");
                    thisDron.controllerCoorp = new ol.proj.transform(conCoord, ""EPSG:4326"", ""EPSG:900913"");
                    controller.set(""id"", ""controller-"" + selectDron);
                    var iconStyle = new ol.style.Style({
                        image: new ol.style.Icon(({
                            anchor: [0.5, 6],
                            anchorXUnits:");
                WriteLiteral(@" 'fraction',
                            anchorYUnits: 'pixels',
                            src: '../images/dController.png'
                        }))
                    });

                    controller.setStyle(iconStyle);

                    if (vmap.getLayerByName(""조종기레이어"") == null)//하나의 레이어에 추가 (레이어는 한번만 생성한다,제거도 안함)
                    {
                        var ctr_vectorSource = new ol.source.Vector({
                            features: [controller]
                        });

                        controllerLayer = new ol.layer.Vector({
                            source: ctr_vectorSource
                        });

                        controllerLayer.set(""name"", ""조종기레이어"");
                        controllerLayer.setZIndex(9);
                        vmap.addLayer(controllerLayer);
                        controller.style = { display: 'none' };

                    } else {
                        controllerLayer.getSource().addFeature(controller);
       ");
                WriteLiteral(@"             }
                }
            })
        }

        $(""#createPolygon"").on(""click"", function (e) {
            console.log(""create polygon"");

            vmap.getViewport().addEventListener('mouseout', function () {
                helpTooltipElement.classList.add('hidden');
            });

            createMeasureTooltip();
            createHelpTooltip();
            //vmap.on('pointermove', pointerMoveHandler);
            moveHandler = vmap.on('pointermove', pointerMoveHandler);;
            addInteraction();

        })

        //db 서버의 정보를 일정 간격으로 읽어오는 타이머 추가
        //타이머가 돌아가면서 드론이 추가되면 add dron을 한다.
        let readDBMainTimer = setInterval(function () {

            $.ajax({
                type: ""POST"",
                url: """);
#nullable restore
#line 567 "C:\Users\CEO\Desktop\소형드론\MiniDronWEB\MiniDronWEB\Views\Present\PMap.cshtml"
                 Write(Url.Action("GetDronDB"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@""",
                data: {},
                //contentType: ""application/json; charset=utf-8"",
                dataType: ""json"",
                success: function (DBdata) {
                    
                    if (DBdata.length) {
                        if (!Dron.totalCnt) {//처음 프로그램 시작 됐을때 DB에 있는 수만큼 추가한다.
                            for (let dbIdx in DBdata) {
                                addDron(DBdata[dbIdx]);
                            }
                        } else { //이후에는 DB에 데이터가 추가 될때마다 기존 데이터와 비교하여 addDron 한다.
                            console.log(""data base serching"", Dron.totalCnt, DBdata.length);
                            if (Dron.totalCnt != DBdata.length) { // DB에 식별된 드론 수와 지도상의 드론수가 다른경우
                                if (Dron.totalCnt < DBdata.length) {//DB에 식별된 드론 수 > 지도상의 드론수 (db에만 있는걸 추가)                                
                                    for (let dbIdx in DBdata) {//중복 검사                                    

                             ");
                WriteLiteral(@"           let isDuplicate = false; //중복 체크 플래그                                        
                                        for (let objIdx in dronObject) {
                                            if (dronObject[objIdx].dronID == DBdata[dbIdx].dronE_MID) { // 식별 이름을 비교한다.
                                                isDuplicate = true; //이름이 같으면 다음 idx로 넘긴다.
                                                continue;
                                            }
                                        }
                                        if (isDuplicate == false) { //중복 체크플래그가 변하지 않으면 드론을 추가한다.                                        
                                            console.log(""Find new dron!"");
                                            addDron(DBdata[dbIdx]);
                                        }

                                    }
                                } else if (Dron.totalCnt > DBdata.length) { // (지도상에만 있는걸 제거)                                      ");
                WriteLiteral(@"      
                                    for (let objIdx in dronObject) {//중복 검사                                    

                                        let isDuplicate = false; //중복 체크 플래그                                        
                                        for (let dbIdx in DBdata) {
                                            if (dronObject[objIdx].dronID == DBdata[dbIdx].dronE_MID) { // 식별 이름을 비교한다.
                                                isDuplicate = true; //이름이 같으면 다음 idx로 넘긴다.
                                                continue;
                                            }
                                        }
                                        if (isDuplicate == false) { //중복 체크플래그가 변하지 않으면 드론을 추가한다.                                        
                                            console.log(""Dron connection finish!"");
                                            removeDron(objIdx);
                                        }

                  ");
                WriteLiteral(@"                  }
                                }
                            }
                        }
                    }
                },
                failure: function (errMsg) {
                    console.log(errMsg);
                }
            });
        },5000) //현재는 5초마다 한번씩 DB를 탐색한다. 
     
        function addDron(receiveData) {
            if (Dron.totalCnt == dronNumLimit) {//갯수제한 검토
                alert(""허용 드론 수 초과"");
                return;
            }

            //식별 시작시간 (추후엔 DB 서버에서 받을지 검토)
            let time = new Date().toLocaleTimeString('ko-KR', { timeStyle: 'medium', hourCycle: 'h24' });

            //드론 객체 생성(식별기 정보 수집)) , .dronE_MID data.latitude, data.longitude
            dronObject.push(new Dron(receiveData, ""익명"", ""010-xxxx-xxxx"", ""YES"", 0, time));

            //드론 객체 내부 타이머 ON
            dronObject[Dron.totalCnt].switchState('ON');
            
            //최종으로 드론수 증가
            Dron.totalCnt++;
        }

        functi");
                WriteLiteral(@"on removeDron(objIndex) {
            if (controllerLayer) {
                let ControllerFeatrues = controllerLayer.getSource().getFeatures();

                for (cnt in ControllerFeatrues) {
                    controllerLayer.getSource().removeFeature(ControllerFeatrues[cnt]); //조종기 관련 feature 제거
                }
            }

            Dron.reduceCnt(); //드론 전체 수 감소
            ////splice로 선택된 드론 idx 제거 해보기            
            dronObject[objIndex].switchState('OFF'); //드론 비행시간 종료
            dronObject.splice(objIndex,1);           
        }

    </script>

    <div id=""modal-placeholder""></div>
    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "169c4ba630011096d29d648468429070266d076d52607", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_8);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n\r\n    \r\n");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n</html >\r\n");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
