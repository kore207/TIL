#pragma checksum "C:\Users\CEO\Desktop\소형드론\source\DronMap\DronMap\Views\Home\Map2.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "71f805fe78a8320eda86d2cca0d066d1b45e10b8"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Map2), @"mvc.1.0.view", @"/Views/Home/Map2.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Home/Map2.cshtml", typeof(AspNetCore.Views_Home_Map2))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "C:\Users\CEO\Desktop\소형드론\source\DronMap\DronMap\Views\_ViewImports.cshtml"
using DronMap;

#line default
#line hidden
#line 2 "C:\Users\CEO\Desktop\소형드론\source\DronMap\DronMap\Views\_ViewImports.cshtml"
using DronMap.Models;

#line default
#line hidden
#line 3 "C:\Users\CEO\Desktop\소형드론\source\DronMap\DronMap\Views\_ViewImports.cshtml"
using DronMap.ViewModels;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"71f805fe78a8320eda86d2cca0d066d1b45e10b8", @"/Views/Home/Map2.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"17c0d9e796847446abb77a811db1a9ab4131c5a2", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_Map2 : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("type", new global::Microsoft.AspNetCore.Html.HtmlString("text/javascript"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/BaseFunction.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/DronObject.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            BeginContext(121, 2, true);
            WriteLiteral("\r\n");
            EndContext();
#line 6 "C:\Users\CEO\Desktop\소형드론\source\DronMap\DronMap\Views\Home\Map2.cshtml"
  
    ViewBag.Title = "MAP2";
    Layout = null;//asp.net core의 레이아웃에 벗어나기 위해 추가

#line default
#line hidden
            BeginContext(218, 27, true);
            WriteLiteral("\r\n<!DOCTYPE html>\r\n<html>\r\n");
            EndContext();
            BeginContext(245, 641, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("head", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "7c206a498abb42c5940bf90951b0638f", async() => {
                BeginContext(251, 290, true);
                WriteLiteral(@"
    <meta http-equiv=""Content-Type"" content=""text/html; charset=UTF-8"" />
    <title>Dron map 2</title>
    <link rel=""stylesheet"" href=""https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css"" />
    <script src=""https://code.jquery.com/jquery-latest.min.js""></script>
");
                EndContext();
                BeginContext(560, 179, true);
                WriteLiteral("    <script type=\"text/javascript\" src=\"https://map.vworld.kr/js/vworldMapInit.js.do?version=2.0&apiKey=B4DB6C25-ADD1-3B61-AED5-934A7F0E07BF&domain=localhost:8080\"></script>\r\n    ");
                EndContext();
                BeginContext(739, 67, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "56ee75ff4dc54951b4522244609d8363", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(806, 6, true);
                WriteLiteral("\r\n    ");
                EndContext();
                BeginContext(812, 65, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "a3de4d725d574d49b1899fa1538705ca", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(877, 2, true);
                WriteLiteral("\r\n");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(886, 4, true);
            WriteLiteral("\r\n\r\n");
            EndContext();
            BeginContext(890, 15959, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6712a1de11ad49889e0c46218c5ed7ba", async() => {
                BeginContext(896, 15946, true);
                WriteLiteral(@"
    <style type=""text/css"">
        .buttons {
            position: relative;
            top: 30px;
        }

        .checkbox-xl {
            position: relative;
            top: 120px;
            left: 90px;
            transform: scale(1.5);
            -webkit-transform: scale(1.5);
        }
    </style>
    <!--네비게이션 영역-->
    <div id=""navi"" style=""height:100%; float:left; width:13% "">
        <div class=""buttons"">
            <!-- 부트스트랩 사용-->
            <button id=""FL"" type=""button"" class=""btn btn-default btn-lg btn-block"">제한구역 보기</button>
            <button id=""position"" type=""button"" class=""btn btn-default btn-lg btn-block"">  내 위치 </button>
            <button id=""addAntenna"" type=""button"" class=""btn btn-default btn-lg btn-block""> 수신기 추가</button>
            <button id=""addDron"" type=""button"" class=""btn btn-default btn-lg btn-block""> 드론 추가 </button>
            <button id=""delDron"" type=""button"" class=""btn btn-default btn-lg btn-block""> 드론 제거 </button>
            <bu");
                WriteLiteral(@"tton id=""simul"" type=""button"" class=""btn btn-default btn-lg btn-block""> 실시간 전시</button>
            <button id=""temp"" type=""button"" class=""btn btn-default btn-lg btn-block""> 임시 버튼 </button>
        </div>
        <div class=""custom-control custom-checkbox checkbox-xl"" "">
            <input type=""checkbox"" class=""custom-control-input"" id=""lt_c_aisprhc"">
            <label class=""custom-control-label"" for=""customCheck1"" style=""color:red"">비행금지구역</label><br />
            <input type=""checkbox"" class=""custom-control-input"" id=""lt_c_aisctrc"">
            <label class=""custom-control-label"" for=""customCheck1"" style=""color:orange""> 관제권</label><br />
            <input type=""checkbox"" class=""custom-control-input"" id=""lt_c_aisresc"">
            <label class=""custom-control-label"" for=""customCheck1"" style=""color:orangered""> 비행제한구역</label><br />
            <input type=""checkbox"" class=""custom-control-input"" id=""lt_c_aisdngc"">
            <label class=""custom-control-label"" for=""customCheck1"" style=""color:pur");
                WriteLiteral(@"ple""> 위험구역    25kg↑</label><br />
            <input type=""checkbox"" class=""custom-control-input"" id=""lt_c_aismoac"">
            <label class=""custom-control-label"" for=""customCheck1"" style=""color:olive""> 군작전구역    25kg↑</label><br />
            <input type=""checkbox"" class=""custom-control-input"" id=""lt_c_aiscatc"">
            <label class=""custom-control-label"" for=""customCheck1"" style=""color:blue""> 훈련구역    25kg↑</label><br />
            <input type=""checkbox"" class=""custom-control-input"" id=""lt_c_aistmac"">
            <label class=""custom-control-label"" for=""customCheck1"" style=""color:brown""> 접근관제구역 25kg↑</label>
        </div>
    </div>

    <!--지도가 들어갈 영역-->
    <div id=""vmap"" style=""height:100%; float:right; width:87%""></div>        

    <script type=""text/javascript"">

        //지도 생성                
        vw.ol3.CameraPosition.center = [14176994.56431106, 4354866.236842043];
        vw.ol3.CameraPosition.zoom = 19;

        vw.ol3.MapOptions = {
            basemapType: vw.ol3.");
                WriteLiteral(@"BasemapType.GRAPHIC
            , controlDensity: vw.ol3.DensityType.FULL
            , interactionDensity: vw.ol3.DensityType.BASIC
            , controlsAutoArrange: true
            , homePosition: vw.ol3.CameraPosition
            , initPosition: vw.ol3.CameraPosition
        };
        
        vmap = new vw.ol3.Map(""vmap"", vw.ol3.MapOptions);

        //실제 사용시에는 저작권 문제로인해 로고 삭제하면 안됨
        $('.vw-notice').remove();
        $('.vw-logo').remove();                
        
        //마커 추가     
        var dronNum = 0;       
        
        var markerLayer; //마커를 담을 레이어 
        var line_feature = new Array();
        var vectorSource;
        var vectorLayer;

        $(""#addDron"").on(""click"", function (e) {                                    

            if (dronNum == 5) {
                alert(""허용 드론 수 초과"");
                return;
            }            

            var addPoint = [];
            addPoint.push(ol.proj.transform([vmap.getView().getCenter()[0], vmap.");
                WriteLiteral(@"getView().getCenter()[1]], ""EPSG:900913"", ""EPSG:4326""));
            
            if (markerLayer == null) {
                markerLayer = new vw.ol3.layer.Marker(vmap);
            }
            
            markerLayer.set(""name"", ""마커레이어"");
            
            vw.ol3.markerOption = {
                x: addPoint[0][0] ,
                y: addPoint[0][1] ,
                epsg: ""EPSG:4326"",
                title: '가상 드론',
                contents: dronInfoArray[dronNum].name + '</br>'
                    + '소유주:' + dronInfoArray[dronNum].honer + '</br>'
                    + '핸드폰 번호:' + dronInfoArray[dronNum].phone + '</br>'
                    + '보험:' + dronInfoArray[dronNum].insurance + '</br>',
                iconUrl: '../images/dronImg2.png',
            }; //마커 옵션 설정
            
            markerLayer.addMarker(vw.ol3.markerOption);// 마커를 레이어에 등록
            //markerLayer.getSource().getFeatures().set(""식별자"", ""ID_"" + 1);
            
            //vmap.removeLayer(vmap.getLa");
                WriteLiteral(@"yerByName(""마커레이어"")) //vmap.getLayerByName(레이어명)            
            if (vmap.getLayerByName(""마커레이어"") == null)//하나의 레이어에 추가한다.    
            {
                markerLayer.setZIndex(10); // 이동 경로보다 마커가 위에오도록함 
                vmap.addLayer(markerLayer) //마커를 vmap에 등록                        
            }            

            //route 레이어 추가 
            line_feature[dronNum] = new ol.Feature({
                geometry: new ol.geom.LineString([]),
                id: dronNum
            });

            line_feature[dronNum].setStyle(style);
            routeFeatures.push(line_feature[dronNum]);
            vectorSource = new ol.source.Vector({
                features: routeFeatures,
                id: dronNum
            });
            
            vectorLayer = new ol.layer.Vector({
                source: vectorSource,
                id: dronNum
            });
            vectorLayer.set(""name"", ""경로레이어"" + dronNum);
            vmap.addLayer(vectorLayer);

            m");
                WriteLiteral(@"oveM(dronNum); //가상 전시를 위한 timer             

            dronNum = plusTargetNum(dronNum);

            
        })

        //드론 삭제 
        $(""#delDron"").on(""click"", function (e) {
            e.preventDefault();
            console.log(vmap.getLayers().getArray());
            //vmap.getLayers().getArray().filter(vectorLayer => vectorLayer.get('name') === ""MeasureLayer"").forEach(vectorLayer => vmap.removeLayer(vectorLayer));                                    
            if (dronNum == 0) {
                alert(""드론이 없습니다."");                
                return;
            }
            dronNum = minusTargetNum(dronNum);

            var DronFeatures = markerLayer.getSource().getFeatures();
            
            markerLayer.removeMarker(DronFeatures[dronNum]);
            
            clearInterval(dronInfoArray[dronNum].interval);
            
            routeFeatures.pop();
            vmap.getLayers().getArray().filter(vectorLayer => vectorLayer.get('name') === '경로레이어");
                WriteLiteral(@"' + dronNum).forEach(vectorLayer => vmap.removeLayer(vectorLayer));                                    
        });
        

        //사각형 이동 
        var distance = 0, dir = 0, dx = 0, dy = 0;
        const moveRect = function (dis) {
            //상하좌우 배열로 변경하기 
            if (dir == 1) {//우측                     
                dx = 0.5; dy = 0;
                if (distance == dis) {
                    distance = 0;
                    dir++;
                }
            }
            else if (dir == 2) {//상측                    
                dx = 0; dy = 0.5;
                if (distance == dis) {
                    distance = 0;
                    dir++;
                }
            }
            else if (dir == 3) {//좌측                    
                dx = -0.5; dy = 0;
                if (distance == dis) {
                    distance = 0;
                    dir++;
                }
            }
            else {//하측                    
                dx ");
                WriteLiteral(@"= 0; dy = -0.5;
                if (distance == dis) {
                    distance = 0;
                    dir = 1;
                }
            }
            distance++;
        }

        var style = new ol.style.Style({
            stroke: new ol.style.Stroke({
                color: [0, 255, 0, .7], //투명도
                width: 1 //두께
            })
        }); // 스타일 설정
        
        var routeFeatures = new Array();
        var coordinates = []; //좌표 설정 라인 좌표를 저장        

        var moveM = function (dronN) {
            
            dronInfoArray[dronNum].interval = setInterval(function () {
                if (vmap.getLayerByName(""마커레이어"") == null) {
                    alert(""드론이 없습니다."");
                    return;
                }
                var dronFeatures = vmap.getLayerByName(""마커레이어"").getSource().getFeatures(); // 마커레이어를 가져온다.

                for (var i = 0; i < dronFeatures.length; i++) {
                    var oldcoor = dronFeatures[i].getGeometry().g");
                WriteLiteral(@"etCoordinates();
                    var newcoor;
                    moveRect(300);
                    if (i == 1)
                        newcoor = [oldcoor[0] + dx, oldcoor[1] + dy];
                    else if (i == 2) {
                        newcoor = [oldcoor[0] + dx, oldcoor[1] - dy];
                        //if (dx > 0) {
                        //    var imgSrc = '../images/dronImg2warn.png';

                        //    var iconStyle = new ol.style.Style({
                        //        image: new ol.style.Icon(({
                        //            anchor: [0.5, 0.5], //마커 이미지의 절대위치를 변경
                        //            anchorXUnits: 'fraction',
                        //            anchorYUnits: 'pixels',
                        //            src: imgSrc,
                        //            rotation: Math.PI / 2.0,
                        //        }))
                        //    });
                        //    dronFeatures[i].setStyle(iconStyle);           ");
                WriteLiteral(@"                 
                        //}
                    }
                    else if (i == 3)
                        newcoor = [oldcoor[0] - dx, oldcoor[1] - dy];
                    else if (i == 4)
                        newcoor = [oldcoor[0] - dx, oldcoor[1] + dy];
                    else
                        newcoor = [oldcoor[0] + dx, oldcoor[1] - dy];

                    var rotation;
                    if (dir == 1) {
                        rotation = Math.PI / 2.0;
                    }
                    else if (dir == 2) {
                        rotation = Math.PI ;
                    }
                    else if (dir == 3) {
                        rotation = -(Math.PI / 2.0);
                    }

                    var iconStyle = new ol.style.Style({
                        image: new ol.style.Icon(({
                            anchor: [0.5, 0.5], //마커 이미지의 절대위치를 변경
                            anchorXUnits: 'fraction',
                        ");
                WriteLiteral(@"    anchorYUnits: 'pixels',
                            src: '../images/dronImg2.png',                            
                            rotation: rotation,
                        }))
                    });
                    dronFeatures[i].setStyle(iconStyle);    


                    dronFeatures[i].getGeometry().setCoordinates(newcoor);
                    //route 표시                  
                    line_feature[i].getGeometry().appendCoordinate(newcoor);
                }                                                                                
                

            }, 100);
        }
                                              
        var layList = [""lt_c_aisprhc"", ""lt_c_aisctrc"", ""lt_c_aisresc"", ""lt_c_aisdngc"", ""lt_c_aismoac"", ""lt_c_aiscatc"", ""lt_c_aistmac""];
          
        $('#'+layList[0]).change(function () {            
            if ($('#' +layList[0]).is("":checked"")) {                
                var wmslayer = vmap.addNamedLayer(""비행금지");
                WriteLiteral(@"구역"", layList[0]);
                vmap.addLayer(wmslayer);
            } else {
                vmap.getLayerByName(""비행금지구역"");
                vmap.removeLayer(vmap.getLayerByName(""비행금지구역""));
            }
        });

        $('#' + layList[1]).change(function () {            
            if ($('#' + layList[1]).is("":checked"")) {                
                var wmslayer = vmap.addNamedLayer(""관제권"", layList[1]);
                vmap.addLayer(wmslayer);
            } else {
                vmap.getLayerByName(""관제권"");
                vmap.removeLayer(vmap.getLayerByName(""관제권""));
            }
        });

        $('#' + layList[2]).change(function () {            
            if ($('#' + layList[2]).is("":checked"")) {                
                var wmslayer = vmap.addNamedLayer(""비행제한구역"", layList[2]);
                vmap.addLayer(wmslayer);
            } else {
                vmap.getLayerByName(""비행제한구역"");
                vmap.removeLayer(vmap.getLayerByName(""비행제한구역""));
      ");
                WriteLiteral(@"      }
        });

        $('#' + layList[3]).change(function () {
            
            if ($('#' + layList[3]).is("":checked"")) {                
                var wmslayer = vmap.addNamedLayer(""위험구역"", layList[3]);
                vmap.addLayer(wmslayer);
            } else {
                vmap.getLayerByName(""위험구역"");
                vmap.removeLayer(vmap.getLayerByName(""위험구역""));
            }
        });

        $('#' + layList[4]).change(function () {            
            if ($('#' + layList[4]).is("":checked"")) {                
                var wmslayer = vmap.addNamedLayer(""군작전구역"", layList[4]);
                vmap.addLayer(wmslayer);
            } else {
                vmap.getLayerByName(""군작전구역"");
                vmap.removeLayer(vmap.getLayerByName(""군작전구역""));
            }
        });

        $('#' + layList[5]).change(function () {            
            if ($('#' + layList[5]).is("":checked"")) {                
                var wmslayer = vmap.addNamed");
                WriteLiteral(@"Layer(""훈련구역"", layList[5]);
                vmap.addLayer(wmslayer);
            } else {
                vmap.getLayerByName(""훈련구역"");
                vmap.removeLayer(vmap.getLayerByName(""훈련구역""));
            }
        });

        $('#' + layList[6]).change(function () {
            if ($('#' + layList[6]).is("":checked"")) {
                var wmslayer = vmap.addNamedLayer(""접근관제구역"", layList[6]);
                vmap.addLayer(wmslayer);
            } else {
                vmap.getLayerByName(""접근관제구역"");
                vmap.removeLayer(vmap.getLayerByName(""접근관제구역""));
            }
        });
                        
        $(""#position"").on(""click"", function (e) {
            e.preventDefault();                                    
            move(14176994.56431106, 4354866.236842043, 18);            
        });             

        //지정 위치로 지도 이동 부드럽게 
        function move(x, y, z) {
            var _center = [x, y];

            var z = z;
            var pan = ol.animation.");
                WriteLiteral(@"pan({
                duration: 1000,
                source: (vmap.getView().getCenter())
            });
            vmap.beforeRender(pan);
            //vmap.getView().setCenter(ol.proj.transform(_center, 'EPSG:4326', ""EPSG:900913""));
            vmap.getView().setCenter(_center);
            setTimeout(""fnMoveZoom()"", 2000);            
        }
        function fnMoveZoom() {
            zoom = vmap.getView().getZoom();
            if (16 > zoom) {
                vmap.getView().setZoom(18);
            }
        };

       

          
    </script>

");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(16849, 9, true);
            WriteLiteral("\r\n</html>");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
